New custom entity state API draft

- There will be a new Lua type state.
- sol.state.create([name]) creates a custom state
- hero:start_state(state) starts the specified custom state on the hero
- hero:get_state() still returns a string for compatibility: "custom"
- hero:get_custom_state() returns the Lua state object
- Only the hero supports state for now, but it might be generalized to
  other entities later.

State methods:

- state:get_name()
- state:get_entity()
- state:get_map()
- state:get_game()
- state:is_current()
- state:is_stopping()
- state:is/set_visible()
- state:get/set_draw_override()
- state:get/set_can_control_direction()
- state:get/set_can_control_movement()
- state:get/set_can_avoid_bad_ground(ground)  -- deep water, hole, ice, lava, prickles
- state:is/set_touching_ground()
- state:get/set_can_come_from_bad_ground()
- state:get/set_are_collisions_ignored()
- state:get/set_can_traverse_ground(ground)  -- Accepts a callback
- state:get/set_can_avoid(entity_type)  -- teletransporter, stream, sensor, explosion, switch
- state:get/set_can_traverse(entity_type)  -- Accepts a callback
- state:is/set_teletransporter_delayed()
- state:get/set_can_persist_on_stream()
- state:get/set_sword_damage_factor()
- state:get/set_can_be_hurt()  -- Accepts a callback
- state:get/set_can_use_sword()
- state:get/set_can_use_shield()
- state:get/set_can_use_item()
- state:get/set_can_pick_treasure()
- state:get/set_can_take_stairs()
- state:get/set_can_take_jumper()
- state:get/set_previous_carried_object_behavior()  -- throw, destroy, keep

State events:

- state:on_started(previous_state_name, [previous_state])
- state:on_finished(next_state_name, [next_state])
- state:on_update()
- state:on_pre_draw(camera)
- state:on_post_draw(camera)
- state:on_suspended(suspended)
- state:on_map_changed()
- state:on_map_finished()
- state:on_map_started()
- state:on_map_opening_transition_finished()
- state:on_position_changed()
- state:on_layer_changed()
- state:on_ground_changed()
- state:on_movement_changed()
- state:on_movement_finished()
- state:on_obstacle_reached()
- state:on_walking_speed_changed()
- state:on_attacked_enemy(attack, victim, victim_sprite, reaction)
- state:on_jumper_activated(jumper)
- state:on_command/key/joypad/mouse/finger_*()

Other API changes:

- entity:get/set_draw_override()
- entity:on_pre_draw(camera)
- entity:on_post_draw(camera)
- entity:on_suspended(suspended)
- hero:on_state_changing(state)
- state as timer context?
